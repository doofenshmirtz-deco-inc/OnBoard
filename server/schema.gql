# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Announcement {
  author: User!
  course: Course!
  createdAt: DateTime!
  html: String!
  id: ID!
  title: String!
}

type AuthToken {
  token: String!
}

type BaseGroup {
  id: ID!
  lastActive: DateTime!
  meetingPassword: String!
  name: String!
  users: [User!]!
}

type BaseNode {
  id: ID!
  link: String
  parent: FolderNode
  title: String!
}

type ClassGroup {
  course: Course!
  duration: Float!
  id: ID!
  lastActive: DateTime!
  meetingPassword: String!
  name: String!
  times: [DateTime!]!
  type: String!
  users: [User!]!
}

input ClassGroupInput {
  courseID: ID!
  duration: Float!
  name: String!
  times: [DateTime!]!
  type: String!
  uids: [String!]!
}

type Course {
  announcements: [Announcement!]
  assessmentPage: FolderNode!
  code: String!
  courseLevel: String!
  coursePage: FolderNode!
  id: ID!
  name: String!
  semester: Semesters!
  year: Int!
}

type CourseColor {
  colour: String!
  course: Course!
}

type CourseGroup {
  id: ID!
  lastActive: DateTime!
  meetingPassword: String!
  name: String!
  users: [User!]!
}

enum CourseRole {
  Coordinator
  Student
  Tutor
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DMGroup {
  id: ID!
  lastActive: DateTime!
  meetingPassword: String!
  name: String!
  users: [User!]!
}

type FolderNode {
  children: [Node!]!
  id: ID!
  link: String
  parent: FolderNode
  title: String!
}

input FolderNodeInput {
  children: [String!]
  id: Float
  link: String
  parent: Float
  title: String
}

union Group = ClassGroup | CourseGroup | DMGroup | StudyGroup

type HeadingNode {
  id: ID!
  link: String
  parent: FolderNode
  title: String!
}

type Message {
  createdAt: DateTime!
  group: BaseGroup!
  id: ID!
  text: String!
  user: User!
}

input MessageInput {
  groupID: ID!
  text: String!
}

type Mutation {
  addClassGroup(classData: ClassGroupInput!): ClassGroup!
  addMessage(message: MessageInput!): Message!
  addStudyGroup(groupName: String!, isPublic: Boolean!, uids: [String!]!): StudyGroup!
  deleteNode(id: Float!): BaseNode!
  editFolderNode(data: FolderNodeInput!): FolderNode!
  editTextNode(data: TextNodeInput!): TextNode!
  joinStudyGroup(groupID: ID!): StudyGroup!
  singleUpload(file: Upload!): String!
}

union Node = FolderNode | HeadingNode | TextNode

type Query {
  course(courseID: ID!): Course!
  courses(limit: Int = 10, order: String, orderBy: String, skip: Int = 0): [Course!]!
  getMessages(groupID: ID!): [Message!]!
  getTestingToken(testUID: String = "test-uid"): AuthToken!
  me: User
  node(id: Float!): Node
  studyRooms: [StudyGroup!]
  user(id: String!): User
  userGroup(id: ID!): BaseGroup
  userGroups: [Group!]!
  users(limit: Int = 10, order: String, orderBy: String, skip: Int = 0): [User!]!
}

enum Semesters {
  One
  Summer
  Two
}

type StudyGroup {
  id: ID!
  isPublic: Boolean!
  lastActive: DateTime!
  meetingPassword: String!
  name: String!
  users: [User!]!
}

type Subscription {
  newMessages: Message!
}

type TextNode {
  id: ID!
  link: String
  parent: FolderNode
  text: String!
  title: String!
}

input TextNodeInput {
  id: Float
  link: String
  parent: Float
  text: String
  title: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String!
  courses(role: CourseRole): [CourseColor!]!
  email: String!
  groups(role: CourseRole): [Group!]!
  id: ID!
  name: String!
}
