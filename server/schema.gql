# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Announcement {
  author: User!
  course: Course!
  createdAt: DateTime!
  html: String!
  id: ID!
  title: String!
}

type AuthToken {
  token: String!
}

type BaseGroup {
  id: ID!
  timetable: Timetable
  users: [User!]!
}

type Course {
  announcements: [Announcement!]
  code: String!
  courseLevel: String!
  id: ID!
  name: String!
  semester: Semesters!
  year: Int!
}

type CourseColor {
  colour: String!
  course: Course!
}

enum CourseRole {
  Coordinator
  Student
  Tutor
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Message {
  createdAt: DateTime!
  group: BaseGroup!
  id: ID!
  text: String!
  user: User!
}

input MessageInput {
  groupID: Int!
  text: String!
}

type Mutation {
  addMessage(message: MessageInput!): Message!
  singleUpload(file: Upload!): String!
}

type Query {
  courses(limit: Int = 10, order: String, orderBy: String, skip: Int = 0): [Course!]!
  getCustomToken(testUID: String = "test-uid"): AuthToken!
  getMessages(groupID: Float!): [Message!]!
  getTestingToken(testUID: String = "test-uid"): AuthToken!
  me: User
  user(id: String!): User
  userGroup(id: String!): BaseGroup
  userGroups(limit: Int = 10, order: String, orderBy: String, skip: Int = 0): [BaseGroup!]!
  users(limit: Int = 10, order: String, orderBy: String, skip: Int = 0): [User!]!
}

enum Semesters {
  One
  Summer
  Two
}

type Subscription {
  newMessages(groupID: Float!): Message!
}

type Timetable {
  duration: Float!
  id: ID!
  name: String!
  times: [DateTime!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  courseColors: [CourseColor!]!
  courses(role: CourseRole): [Course!]!
  email: String!
  groups: [BaseGroup!]!
  id: ID!
  name: String!
}
